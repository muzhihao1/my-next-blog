import { renderHook }
from "@testing-library/react";
import { usePerformanceMonitor }
from "../usePerformanceMonitor";
// Mock console.log const originalLog = console.log const mockConsoleLog = jest.fn() beforeAll(() => { console.log = mockConsoleLog }) afterAll(() => { console.log = originalLog }) // Mock performance API const mockPerformanceData = { fetchStart: 1000, domainLookupStart: 1010, domainLookupEnd: 1020, connectStart: 1020, connectEnd: 1030, responseStart: 1040, loadEventEnd: 2000, domContentLoadedEventEnd: 1800, entryType: 'navigation', name: 'document', startTime: 0, duration: 1000, redirectCount: 0, type: 'navigate', nextHopProtocol: 'http/1.1', workerStart: 0, redirectStart: 0, redirectEnd: 0, secureConnectionStart: 0, requestStart: 1030, responseEnd: 1050, transferSize: 1000, encodedBodySize: 800, decodedBodySize: 1200, serverTiming: [], unloadEventStart: 0, unloadEventEnd: 0, domInteractive: 1500, domContentLoadedEventStart: 1700, domComplete: 1900, loadEventStart: 1950, activationStart: 0, criticalCHRestart: 0, notRestoredReasons: null, renderBlockingStatus: 'non-blocking', toJSON: () => ({}) }
const mockGetEntriesByType = jest.fn(() => [mockPerformanceData]);
// Mock web-vitals const mockWebVitals = { getCLS: jest.fn((callback: Function) => callback({ value: 0.05 })), getFID: jest.fn((callback: Function) => callback({ value: 100 })), getLCP: jest.fn((callback: Function) => callback({ value: 2500 })) }

describe('usePerformanceMonitor', () => { beforeEach(() => { jest.clearAllMocks() // Reset window.performance mock Object.defineProperty(window, 'performance', { writable: true, configurable: true, value: { getEntriesByType: mockGetEntriesByType }
}) })
it('logs performance metrics when performance API is available', () => { renderHook(() => usePerformanceMonitor()) expect(mockGetEntriesByType).toHaveBeenCalledWith('navigation') expect(mockConsoleLog).toHaveBeenCalledWith('Performance Metrics:', { pageLoadTime: '1000.00ms', dnsTime: '10.00ms', tcpTime: '10.00ms', ttfb: '40.00ms', domContentLoaded: '800.00ms' }) })
it('handles missing performance API gracefully', () => { // Remove performance API Object.defineProperty(window, 'performance', { writable: true, configurable: true, value: undefined }) renderHook(() => usePerformanceMonitor()) expect(mockConsoleLog).not.toHaveBeenCalledWith( expect.stringContaining('Performance Metrics:'), expect.anything() ) })
it('handles empty navigation entries', () => { mockGetEntriesByType.mockReturnValueOnce([]) renderHook(() => usePerformanceMonitor()) expect(mockGetEntriesByType).toHaveBeenCalledWith('navigation') expect(mockConsoleLog).not.toHaveBeenCalledWith( expect.stringContaining('Performance Metrics:'), expect.anything() ) })
it('logs web vitals when available', () => { // Add web-vitals to window Object.defineProperty(window, 'web-vital', { writable: true, configurable: true, value: mockWebVitals }) renderHook(() => usePerformanceMonitor()) expect(mockWebVitals.getCLS).toHaveBeenCalled() expect(mockWebVitals.getFID).toHaveBeenCalled() expect(mockWebVitals.getLCP).toHaveBeenCalled() expect(mockConsoleLog).toHaveBeenCalledWith('CLS:', 0.05) expect(mockConsoleLog).toHaveBeenCalledWith('FID:', 100) expect(mockConsoleLog).toHaveBeenCalledWith('LCP:', 2500) // Clean up delete (window as any)['web-vital']
})
it('handles missing web vitals gracefully', () => { // Ensure web-vitals is not in window delete (window as any)['web-vital']
renderHook(() => usePerformanceMonitor()) // Should still log performance metrics expect(mockConsoleLog).toHaveBeenCalledWith( 'Performance Metrics:', expect.any(Object) ) // But not web vitals expect(mockConsoleLog).not.toHaveBeenCalledWith('CLS:', expect.anything()) expect(mockConsoleLog).not.toHaveBeenCalledWith('FID:', expect.anything()) expect(mockConsoleLog).not.toHaveBeenCalledWith('LCP:', expect.anything()) })
it('handles partial web vitals methods', () => { // Add partial web-vitals (only CLS) Object.defineProperty(window, 'web-vital', { writable: true, configurable: true, value: { getCLS: mockWebVitals.getCLS }
}) renderHook(() => usePerformanceMonitor()) expect(mockWebVitals.getCLS).toHaveBeenCalled() expect(mockConsoleLog).toHaveBeenCalledWith('CLS:', 0.05) // FID and LCP should not be logged expect(mockConsoleLog).not.toHaveBeenCalledWith('FID:', expect.anything()) expect(mockConsoleLog).not.toHaveBeenCalledWith('LCP:', expect.anything()) // Clean up delete (window as any)['web-vital']
})
it('calculates metrics correctly with different timing values', () => { const customPerfData = { ...mockPerformanceData, fetchStart: 0, domainLookupStart: 50, domainLookupEnd: 100, connectStart: 100, connectEnd: 200, responseStart: 300, loadEventEnd: 3000, domContentLoadedEventEnd: 2500 }
mockGetEntriesByType.mockReturnValueOnce([customPerfData]) renderHook(() => usePerformanceMonitor()) expect(mockConsoleLog).toHaveBeenCalledWith('Performance Metrics:', { pageLoadTime: '3000.00ms', dnsTime: '50.00ms', tcpTime: '100.00ms', ttfb: '300.00ms', domContentLoaded: '2500.00ms' }) })
it('handles zero timing values', () => { const zeroPerfData = { ...mockPerformanceData, fetchStart: 0, domainLookupStart: 0, domainLookupEnd: 0, connectStart: 0, connectEnd: 0, responseStart: 0, loadEventEnd: 0, domContentLoadedEventEnd: 0 }
mockGetEntriesByType.mockReturnValueOnce([zeroPerfData]) renderHook(() => usePerformanceMonitor()) expect(mockConsoleLog).toHaveBeenCalledWith('Performance Metrics:', { pageLoadTime: '0.00ms', dnsTime: '0.00ms', tcpTime: '0.00ms', ttfb: '0.00ms', domContentLoaded: '0.00ms' }) })
it('runs only once on mount', () => { const { rerender } = renderHook(() => usePerformanceMonitor()) expect(mockGetEntriesByType).toHaveBeenCalledTimes(1) // Re-render should not trigger another measurement rerender() expect(mockGetEntriesByType).toHaveBeenCalledTimes(1) }) })
