import { renderHook, act }
from "@testing-library/react";
import { useTheme }
from "../useTheme";
// Mock localStorage const localStorageMock = { getItem: jest.fn(), setItem: jest.fn(), removeItem: jest.fn(), clear: jest.fn(), length: 0, key: jest.fn(), }
Object.defineProperty(window, 'localStorage', { value: localStorageMock }) // Mock matchMedia const mockMatchMedia = jest.fn() Object.defineProperty(window, 'matchMedia', { writable: true, value: mockMatchMedia, }) // Mock document.documentElement.setAttribute const mockSetAttribute = jest.fn() document.documentElement.setAttribute = mockSetAttribute describe('useTheme', () => { let mockMediaQueryList: any beforeEach(() => { jest.clearAllMocks() jest.useFakeTimers() // Setup default matchMedia mock mockMediaQueryList = { matches: false, addEventListener: jest.fn(), removeEventListener: jest.fn(), }
mockMatchMedia.mockReturnValue(mockMediaQueryList) })
afterEach(() => { jest.useRealTimers() })
it('initializes with light theme when no saved preference', () => { localStorageMock.getItem.mockReturnValue(null) mockMediaQueryList.matches = false const { result } = renderHook(() => useTheme()) // After mount effect act(() => { jest.runAllTimers() }) expect(result.current.mounted).toBe(true) expect(result.current.theme).toBe('light') expect(mockSetAttribute).toHaveBeenCalledWith('data-theme', 'light') })
it('uses saved theme from localStorage', () => { localStorageMock.getItem.mockReturnValue('dark') const { result } = renderHook(() => useTheme()) act(() => { jest.runAllTimers() }) expect(result.current.theme).toBe('dark') expect(mockSetAttribute).toHaveBeenCalledWith('data-theme', 'dark') })
it('uses system preference when no saved theme', () => { localStorageMock.getItem.mockReturnValue(null) mockMediaQueryList.matches = true // prefers dark const { result } = renderHook(() => useTheme()) act(() => { jest.runAllTimers() }) expect(result.current.theme).toBe('dark') expect(mockSetAttribute).toHaveBeenCalledWith('data-theme', 'dark') })
it('toggles theme from light to dark', () => { localStorageMock.getItem.mockReturnValue('light') const { result } = renderHook(() => useTheme()) act(() => { jest.runAllTimers() }) expect(result.current.theme).toBe('light') // Toggle theme act(() => { result.current.toggleTheme() }) expect(result.current.theme).toBe('dark') expect(localStorageMock.setItem).toHaveBeenCalledWith('theme', 'dark') expect(mockSetAttribute).toHaveBeenCalledWith('data-theme', 'dark') })
it('toggles theme from dark to light', () => { localStorageMock.getItem.mockReturnValue('dark') const { result } = renderHook(() => useTheme()) act(() => { jest.runAllTimers() }) expect(result.current.theme).toBe('dark') // Toggle theme act(() => { result.current.toggleTheme() }) expect(result.current.theme).toBe('light') expect(localStorageMock.setItem).toHaveBeenCalledWith('theme', 'light') expect(mockSetAttribute).toHaveBeenCalledWith('data-theme', 'light') })
it('listens to system theme changes when no saved preference', () => { localStorageMock.getItem.mockReturnValue(null) let changeHandler: ((e: MediaQueryListEvent) => void) | null = null mockMediaQueryList.addEventListener.mockImplementation((event: string, handler: any) => { if (event === 'change') { changeHandler = handler }
}) const { result } = renderHook(() => useTheme()) act(() => { jest.runAllTimers() }) expect(mockMediaQueryList.addEventListener).toHaveBeenCalledWith('change', expect.any(Function)) // Simulate system theme change to dark act(() => { if (changeHandler) { changeHandler({ matches: true }
as MediaQueryListEvent) }
}) expect(result.current.theme).toBe('dark') expect(mockSetAttribute).toHaveBeenCalledWith('data-theme', 'dark') })
it('ignores system theme changes when user has saved preference', () => { localStorageMock.getItem.mockReturnValue('light') let changeHandler: ((e: MediaQueryListEvent) => void) | null = null mockMediaQueryList.addEventListener.mockImplementation((event: string, handler: any) => { if (event === 'change') { changeHandler = handler }
}) const { result } = renderHook(() => useTheme()) act(() => { jest.runAllTimers() }) // Simulate system theme change act(() => { if (changeHandler) { changeHandler({ matches: true }
as MediaQueryListEvent) }
}) // Theme should remain light (user preference) expect(result.current.theme).toBe('light') })
it('cleans up event listener on unmount', () => { const { unmount } = renderHook(() => useTheme()) act(() => { jest.runAllTimers() }) unmount() expect(mockMediaQueryList.removeEventListener).toHaveBeenCalledWith('change', expect.any(Function)) }) })
