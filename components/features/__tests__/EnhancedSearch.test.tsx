import { render, screen, waitFor }
from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { EnhancedSearch }
from "../EnhancedSearch";
// Mock next/navigation jest.mock('next/navigation', () => ({ useRouter: () => ({ push: jest.fn(), }), })) // Mock hooks jest.mock('@/lib/hooks/useDebounce', () => ({ useDebounce: (value: string) => value, }))

jest.mock('@/lib/hooks/useSearchHistory', () => ({ useSearchHistory: () => ({ history: [ { id: '1', query: 'React', timestamp: Date.now(), resultCount: 5 }, { id: '2', query: 'TypeScript', timestamp: Date.now(), resultCount: 3 }, ], addToHistory: jest.fn(), removeFromHistory: jest.fn(), clearHistory: jest.fn(), getRecentQueries: () => ['React', 'TypeScript'], getPopularQueries: () => ['React', 'TypeScript'], }), })) // Mock search engine jest.mock('@/lib/search/advancedSearch', () => ({ AdvancedSearch: jest.fn().mockImplementation(() => ({ search: jest.fn().mockReturnValue({ results: [ { id: '1', title: 'React 入门指南', content: '学习 React 的基础知识', type: 'post', url: '/posts/react-guide', category: '前端开发', date: new Date('2024-01-01'), }, { id: '2', title: 'TypeScript 最佳实践', content: 'TypeScript 开发技巧', type: 'post', url: '/posts/typescript-tips', category: '前端开发', date: new Date('2024-01-02'), }, ], stats: { totalResults: 2, resultsByType: { post: 2, project: 0, book: 0, tool: 0 }, searchTime: 50, }, }), getSuggestions: jest.fn().mockReturnValue(['React Hooks', 'React Router']), getCategories: jest.fn().mockReturnValue(['前端开发', '后端技术']), getTags: jest.fn().mockReturnValue(['React', 'TypeScript', 'JavaScript']), })), })) describe('EnhancedSearch', () => { beforeEach(() => { jest.clearAllMocks() })
it('renders search button with keyboard shortcut', () => { render(<EnhancedSearch />
)
expect(screen.getByText('🔍')).toBeInTheDocument() expect(screen.getByText('搜索')).toBeInTheDocument() expect(screen.getByText('⌘')).toBeInTheDocument() expect(screen.getByText('K')).toBeInTheDocument() })
it('opens search modal when button is clicked', async () => { const user = userEvent.setup() render(<EnhancedSearch />
)
const searchButton = screen.getByRole('button', { name: /搜索/i }) await user.click(searchButton) expect(screen.getByPlaceholderText('搜索文章、项目、书籍、工具...')).toBeInTheDocument() })
it('opens search modal with Cmd+K keyboard shortcut', async () => { render(<EnhancedSearch />
)
const event = new KeyboardEvent('keydown', { key: 'k', metaKey: true, }) document.dispatchEvent(event) await waitFor(() => { expect(screen.getByPlaceholderText('搜索文章、项目、书籍、工具...')).toBeInTheDocument() }) })
it('closes search modal with Escape key', async () => { const user = userEvent.setup() render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i })) expect(screen.getByPlaceholderText('搜索文章、项目、书籍、工具...')).toBeInTheDocument() const event = new KeyboardEvent('keydown', { key: 'Escape' }) document.dispatchEvent(event) await waitFor(() => { expect(screen.queryByPlaceholderText('搜索文章、项目、书籍、工具...')).not.toBeInTheDocument() }) })
it('displays search history when input is focused', async () => { const user = userEvent.setup() render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i }))

const input = screen.getByPlaceholderText('搜索文章、项目、书籍、工具...') await user.click(input) expect(screen.getByText('搜索历史')).toBeInTheDocument() expect(screen.getByText('React')).toBeInTheDocument() expect(screen.getByText('TypeScript')).toBeInTheDocument() expect(screen.getByText('(5 结果)')).toBeInTheDocument() expect(screen.getByText('(3 结果)')).toBeInTheDocument() })
it('clears search history when clear button is clicked', async () => { const user = userEvent.setup() const { useSearchHistory } = require('@/lib/hooks/useSearchHistory') const clearHistory = jest.fn() useSearchHistory.mockReturnValue({ history: [{ id: '1', query: 'React', timestamp: Date.now(), resultCount: 5 }
], clearHistory, addToHistory: jest.fn(), removeFromHistory: jest.fn(), getRecentQueries: () => [], }) render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i })) await user.click(screen.getByPlaceholderText('搜索文章、项目、书籍、工具...')) const clearButton = screen.getByText('清除') await user.click(clearButton) expect(clearHistory).toHaveBeenCalled() })
it('performs search and displays results', async () => { const user = userEvent.setup() render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i }))

const input = screen.getByPlaceholderText('搜索文章、项目、书籍、工具...') await user.type(input, 'React') await waitFor(() => { expect(screen.getByText('React 入门指南')).toBeInTheDocument() expect(screen.getByText('学习 React 的基础知识')).toBeInTheDocument() expect(screen.getByText('TypeScript 最佳实践')).toBeInTheDocument() expect(screen.getByText('TypeScript 开发技巧')).toBeInTheDocument() }) })
it('displays search suggestions while typing', async () => { const user = userEvent.setup() render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i }))

const input = screen.getByPlaceholderText('搜索文章、项目、书籍、工具...') await user.type(input, 'Re') await waitFor(() => { expect(screen.getByText('搜索建议')).toBeInTheDocument() expect(screen.getByText('React Hooks')).toBeInTheDocument() expect(screen.getByText('React Router')).toBeInTheDocument() }) })
it('filters search results by type', async () => { const user = userEvent.setup() const { AdvancedSearch } = require('@/lib/search/advancedSearch') const mockSearch = jest.fn().mockReturnValue({ results: [ { id: '1', title: 'Project Alpha', content: 'A great project', type: 'project', url: '/projects/alpha', }, ], stats: { totalResults: 1, resultsByType: { post: 0, project: 1, book: 0, tool: 0 }, searchTime: 30 }, }) AdvancedSearch.mockImplementation(() => ({ search: mockSearch, getSuggestions: jest.fn().mockReturnValue([]), getCategories: jest.fn().mockReturnValue([]), })) render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i }))

const projectButton = screen.getByRole('button', { name: '项目' }) await user.click(projectButton) await waitFor(() => { expect(mockSearch).toHaveBeenCalledWith( expect.objectContaining({ filters: expect.objectContaining({ type: 'project' }), }) ) }) })
it('toggles advanced filters panel', async () => { const user = userEvent.setup() render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i })) expect(screen.queryByText('分类：')).not.toBeInTheDocument() const filterButton = screen.getByRole('button', { name: /高级筛选/i }) await user.click(filterButton) expect(screen.getByText('分类：')).toBeInTheDocument() expect(screen.getByText('时间：')).toBeInTheDocument() })
it('filters by date range preset', async () => { const user = userEvent.setup() const { AdvancedSearch } = require('@/lib/search/advancedSearch') const mockSearch = jest.fn().mockReturnValue({ results: [], stats: {}
}) AdvancedSearch.mockImplementation(() => ({ search: mockSearch, getSuggestions: jest.fn().mockReturnValue([]), getCategories: jest.fn().mockReturnValue([]), })) render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i })) await user.click(screen.getByRole('button', { name: /高级筛选/i }))

const weekButton = screen.getByRole('button', { name: '本周' }) await user.click(weekButton) await waitFor(() => { expect(mockSearch).toHaveBeenCalledWith( expect.objectContaining({ filters: expect.objectContaining({ dateRange: { preset: 'week' }, }), }) ) }) })
it('navigates to result when clicked', async () => { const user = userEvent.setup() const { useRouter } = require('next/navigation') const push = jest.fn() useRouter.mockReturnValue({ push }) render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i })) await user.type(screen.getByPlaceholderText('搜索文章、项目、书籍、工具...'), 'React') await waitFor(() => { expect(screen.getByText('React 入门指南')).toBeInTheDocument() }) await user.click(screen.getByText('React 入门指南')) expect(push).toHaveBeenCalledWith('/posts/react-guide') })
it('shows no results message when search returns empty', async () => { const user = userEvent.setup() const { AdvancedSearch } = require('@/lib/search/advancedSearch') AdvancedSearch.mockImplementation(() => ({ search: jest.fn().mockReturnValue({ results: [], stats: {}
}), getSuggestions: jest.fn().mockReturnValue([]), getCategories: jest.fn().mockReturnValue([]), })) render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i })) await user.type(screen.getByPlaceholderText('搜索文章、项目、书籍、工具...'), 'xyz') await waitFor(() => { expect(screen.getByText('没有找到相关内容')).toBeInTheDocument() }) })
it('displays result count in footer', async () => { const user = userEvent.setup() render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i })) await user.type(screen.getByPlaceholderText('搜索文章、项目、书籍、工具...'), 'React') await waitFor(() => { expect(screen.getByText('共 2 个结果')).toBeInTheDocument() }) })
it('removes individual history item', async () => { const user = userEvent.setup() const { useSearchHistory } = require('@/lib/hooks/useSearchHistory') const removeFromHistory = jest.fn() useSearchHistory.mockReturnValue({ history: [{ id: '1', query: 'React', timestamp: Date.now(), resultCount: 5 }
], removeFromHistory, clearHistory: jest.fn(), addToHistory: jest.fn(), getRecentQueries: () => [], }) render(<EnhancedSearch />) await user.click(screen.getByRole('button', { name: /搜索/i })) await user.click(screen.getByPlaceholderText('搜索文章、项目、书籍、工具...')) const removeButton = screen.getByText('✕') await user.click(removeButton) expect(removeFromHistory).toHaveBeenCalledWith('1') }) })
